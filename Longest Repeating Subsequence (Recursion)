#include <iostream>
using namespace std;
int longest_repeating_subsequence(string s1,string s2,int l1,int l2,int** dp){
if(l1==0 || l2==0){
      dp[l1][l2]=0;
        return 0;
}
if(s1[l1-1]==s2[l2-1] && l1 !=l2){
        return 1+longest_repeating_subsequence(s1,s2,l1-1,l2-1,dp);
}
else if(dp[l1][l2]!=-1){
        return dp[l1][l2];
}
else{
        int left=longest_repeating_subsequence(s1,s2,l1,l2-1,dp);
        int right=longest_repeating_subsequence(s1,s2,l1-1,l2,dp);
        return dp[l1][l2]=max(left,right);
}


}
int main() {
   string s1="axxyxx";
   string s2="axxyxx";
   int** dp=new int*[s1.length()+1];
  for(int i=0;i<s1.length()+1;i++){
          dp[i]=new int[s2.length()+1];
  }
  for(int i=0;i<s1.length()+1;i++){
    for(int j=0;j<s2.length()+1;j++){
                  dp[i][j]=-1;
          }
  }
    cout<<longest_repeating_subsequence(s1,s2,s1.length(),s2.length(),dp);
}
