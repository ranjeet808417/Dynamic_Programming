#include <iostream>
using namespace std;
int longest_palindromic_subsequence(string& str,int length ,int ** dp){
for(int i=0;i<length;i++){
        dp[i][i]=1;
}
for(int i=2;i<=length;i++){
 for(int j=0;j<=length-i;j++){
int k=j+i-1;
if(i==2 && str[j]==str[k]){
dp[j][k]=2;
}
else if(str[j]==str[k]){
        dp[j][k]=2+dp[j+1][k-1];
}
else{
        dp[j][k]=max(dp[j+1][k],dp[j][k-1]);
}
 }

}
return dp[0][length-1];


}

int main() {
    string str="GEEKSFORGEEKS"; 
    int** dp=new int*[str.length()];
    for(int i=0;i<str.length();i++){
            dp[i]=new int[str.length()];
    }
    for(int i=0;i<str.length();i++){
            for(int j=0;j<str.length();j++){
                    dp[i][j]=-1;
            }
    }
    cout<<longest_palindromic_subsequence(str,str.length(),dp)<<endl;
}
