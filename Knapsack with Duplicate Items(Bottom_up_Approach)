#include<iostream>
using namespace std;
int knapSack(int N, int W, int val[], int wt[])
    {
      
      int dp[N+1][W+1]={0};
      for(int i=0;i<N+1;i++){
          for(int j=0;j<W+1;j++){
              if(i==0||j==0){
                  dp[i][j]=0;
              }
              else if(wt[i-1]<=j){
                  dp[i][j]=max(dp[i-1][j],val[i-1]+dp[i][j-wt[i-1]]);
              }
              else{
                  dp[i][j]=dp[i-1][j];
              }
              
          }
      }
      
      return dp[N][W];
      
        // code here
    }

int main()
 {
	//code

int t;
cin>>t;
while(t--){
int n,w;
cin>>n>>w;
int val[n];
int wt[n];
for(int i=0;i<n;i++){
        cin>>val[i];
}
   for(int j=0;j<n;j++){
           cin>>wt[j];
   }
cout<<knapSack(n,w,val,wt)<<endl;
}
return 0;
}


	
